// This started from atomic in mst-middlewares
import {
    createActionTrackingMiddleware2,
    recordPatches,
    IPatchRecorder,
    isActionContextThisOrChildOf
} from "mobx-state-tree";

/**
 * Record all patches from all initial or top level actions, group together
 * patches from child actions.  If an error happens during the action undo
 * the action.
 */
const atomic = createActionTrackingMiddleware2<{ recorder: IPatchRecorder }>({
    filter(call) {
        // only call the methods below for actions that were not being recorded,
        // but do not call them for child actions (which inherit a copy of the env)
        if (call.env) {
            // already recording
            return false;
        }

        return true;
    },
    onStart(call) {
        const recorder = recordPatches(call.tree, (_patch, _inversePatch, actionContext) => {
            // only record patches that were generated by this action or children of this action
            return !!actionContext && isActionContextThisOrChildOf(actionContext, call.id);
        });
        recorder.resume();
        call.env = {
            recorder
        };
    },
    onFinish(call, error) {
        const recorder = call.env?.recorder;
        if (!recorder) {
            throw new Error("The call.env is corrupted");
        }

        call.env = undefined;
        recorder.stop();

        if (error !== undefined) {
            // CHECKME: is the error logged in this case, or it is silently undone?
            recorder.undo();
        }
    }
});

export default atomic;
