import { Instance } from "mobx-state-tree";
import { TreeUndoEntry } from "./undo-manager/undo-store";

export interface ContainerAPI {
    /**
     * Propagate shared model state to other trees. 
     * This is called by either a tile or a shared model
     * 
     * The shared model is identified by an id inside of the snapshot
     * The sourceTreeId indicates which tree is sending this update.
     * The new shared model snapshot will not be sent back to this source.
     * 
     * Note: The returned promise should only resolve after the shared model has been 
     * updated in the container and in all tiles that are using the shared model
     * The promise does not guarantee that all of the tiles have updated their own 
     * objects related to the shared model.
     * In particular when this is called by a shared model when it is applying patches 
     * from an undo or redo, the tiles will explicitly not update their related objects
     * because they will receive patches that should contain these changes separately.
     */
    updateSharedModel: (containerActionId: string, sourceTreeId: string, snapshot: any) => Promise<void>;
    
    /**
     * Trees should call this to send new undo entries to the container. The
     * container will send back the inversePatches of the entry via
     * `applyPatchesFromUndo`.
     * 
     * @param containerActionId should be a UUID that is either generated by the
     * tree if it initiates this undo entry, or if the changes in this entry
     * were triggered via a change in a shared model this should be the
     * containerActionId that was passed to the tree by
     * `applySharedModelSnapshotFromContainer`.
     * 
     * @param treeUndoEntry This contains the patches and inversePatches of this
     * undo entry. TODO: this should support sending data over postMessage so
     * either it should always be a snapshot, or the api should accept models
     * and snapshots.
     */
    addUndoEntry: (containerActionId: string, treeUndoEntry: Instance<typeof TreeUndoEntry>, undoableAction: boolean) => void;
}
